{
    "readme":{
        "template": "[![view on npm](http:\/\/img.shields.io\/npm\/v\/wodge.svg)](https:\/\/www.npmjs.org\/package\/wodge)\n![npm module downloads per month](http:\/\/img.shields.io\/npm\/dm\/wodge.svg)\n[![Dependency Status](https:\/\/david-dm.org\/75lb\/wodge.svg)](https:\/\/david-dm.org\/75lb\/wodge)\n![Analytics](https:\/\/ga-beacon.appspot.com\/UA-27725889-25\/wodge\/README.md?pixel)\n\n[![browser support](https:\/\/ci.testling.com\/75lb\/wodge.png)](https:\/\/ci.testling.com\/75lb\/wodge)\n\n#wodge\nA collection of useful functions.\n\n#API Documentation\nGenerated jsdoc documentation.\n\n{{#if functions}}{{#each functions}}##{{{name}}}\n{{#if description}}{{{description}}}\n\n{{\/if~}}\n\n{{#if parameters}}###Parameters\n{{#each parameters}}{{name}} { {{~type~}} } - {{{description}}}{{#if optional}} *optional*{{\/if}}{{#if default}} *default={{{default}}}*{{\/if}}  \n{{\/each}}\n{{\/if~}}\n\n{{#if returns}}**Returns** {{returns.type}} {{{returns.description}}}\n\n{{#if examples}}###Example\n{{#each examples}}```js\n{{{this}}}\n```\n{{\/each}}{{\/if~}}\n\n{{\/if~}}\n\n\n{{\/each}}{{\/if}}",
        "data": {
    "functions": [
        {
            "name": "extend",
            "access": "",
            "virtual": false,
            "description": "Merge a list of objects, left to right, into one.",
            "parameters": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "a sequence of Object instances to be extended",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.extend({}, { one: 1, three: 3 }, { one: \"one\", two: 2 }, { four: 4 });\n{ one: 'one',\n  three: 3,\n  two: 2,\n  four: 4 }"
            ]
        },
        {
            "name": "clone",
            "access": "",
            "virtual": false,
            "description": "Clones an object or array",
            "parameters": [
                {
                    "name": "input",
                    "type": [
                        "Object",
                        "Array"
                    ],
                    "description": "the input to clone",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> date = new Date()\nFri May 09 2014 13:54:34 GMT+0200 (CEST)\n> w.clone(date)\n{}  // a Date instance doensn't own any properties\n> date.clive = \"hater\"\n'hater'\n> w.clone(date)\n{ clive: 'hater' }\n> array = [1,2,3]\n[ 1, 2, 3 ]\n> newArray = w.clone(array)\n[ 1, 2, 3 ]\n> array === newArray\nfalse"
            ],
            "returns": {
                "type": [
                    "Object",
                    "Array"
                ],
                "description": ""
            }
        },
        {
            "name": "omit",
            "access": "",
            "virtual": false,
            "description": "Returns a clone of the input object, minus the specified properties",
            "parameters": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "the object to clone",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "toOmit",
                    "type": "string[]",
                    "description": "an array of property names to omit from the clone",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.omit({ one: 1, two: 2, three: 3, four: 4 }, [ \"two\", \"four\" ]);\n{ one: 1, three: 3 }"
            ],
            "returns": {
                "type": "Object",
                "description": ""
            }
        },
        {
            "name": "escapeRegExp",
            "access": "",
            "virtual": false,
            "description": "escape special regular expression characters",
            "parameters": [],
            "examples": [
                "> w.escapeRegExp(\"(.*)\");\n'\\\\(\\\\.\\\\*\\\\)'"
            ]
        },
        {
            "name": "pluck",
            "access": "",
            "virtual": false,
            "description": "Plucks the value of the specified property from each object in the input array",
            "parameters": [
                {
                    "name": "arrayOfObjects",
                    "type": "Object[]",
                    "description": "the input array of objects",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "the",
                    "type": "string",
                    "description": "property to pluck",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> var data = [\n...     {one: 1, two: 2},\n...     {two: \"two\"},\n...     {one: \"one\", two: \"zwei\"},\n... ];\nundefined\n> w.pluck(data, \"one\");\n[ 1, 'one' ]\n> w.pluck(data, \"two\");\n[ 2, 'two', 'zwei' ]\n> w.pluck(data, \"one\", \"two\");\n[ 1, 'two', 'one' ]"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "isNumber",
            "access": "",
            "virtual": false,
            "description": "Returns true if input is a number",
            "parameters": [],
            "examples": [
                "> w.isNumber(0)\ntrue\n> w.isNumber(1)\ntrue\n> w.isNumber(1.1)\ntrue\n> w.isNumber(0xff)\ntrue\n> w.isNumber(0644)\ntrue\n> w.isNumber(6.2e5)\ntrue\n> w.isNumber(a)\nfalse\n> w.isNumber(NaN)\nfalse\n> w.isNumber(Infinity)\nfalse"
            ]
        },
        {
            "name": "isPlainObject",
            "access": "",
            "virtual": false,
            "description": "Returns true if input type is `object` and not an Array",
            "parameters": [
                {
                    "name": "input",
                    "type": "*",
                    "description": "the input to test",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.isPlainObject(new Date())\ntrue\n> w.isPlainObject({ clive: \"hater\" })\ntrue\n> w.isPlainObject([ 0, 1 ])\nfalse"
            ],
            "returns": {
                "type": "boolean",
                "description": ""
            }
        },
        {
            "name": "arrayify",
            "access": "",
            "virtual": false,
            "description": "Takes input and guarantees an array back. Result can be one of three things:\n\n- puts a single scalar in an array\n- converts array-like object (e.g. `arguments`) to a real array\n- converts null or undefined to an empty array",
            "parameters": [
                {
                    "name": "input",
                    "type": "*",
                    "description": "the input value to convert to an array",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.arrayify(null)\n[]\n> w.arrayify(0)\n[ 0 ]\n> w.arrayify([ 1, 2 ])\n[ 1, 2 ]\n> function f(){ return w.arrayify(arguments); }\nundefined\n> f(1,2,3)\n[ 1, 2, 3 ]"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "every",
            "access": "",
            "virtual": false,
            "description": "Returns true if the supplied iterator function returns true for every property in the object",
            "parameters": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "the object to inspect",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "iterator",
                    "type": "function",
                    "description": "the iterator function to run against each key/value pair, the args are `(value, key)`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> function aboveTen(input){ return input > 10; }\nundefined\n> w.every({ eggs: 12, carrots: 30, peas: 100 }, aboveTen)\ntrue\n> w.every({ eggs: 6, carrots: 30, peas: 100 }, aboveTen)\nfalse"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "each",
            "access": "",
            "virtual": false,
            "description": "Runs the iterator function against every key/value pair in the input object",
            "parameters": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "the object to iterate",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "callback",
                    "type": "function",
                    "description": "the iterator function to run against each key/value pair, the args are `(value, key)`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> var total = 0;\nundefined\n> function addToTotal(n){ total += n; }\nundefined\n> w.each({ eggs: 3, celery: 2, carrots: 1 }, addToTotal)\nundefined\n> total\n6"
            ]
        },
        {
            "name": "bytesToSize",
            "access": "",
            "virtual": false,
            "description": "Convert bytes to human-readable size",
            "parameters": [
                {
                    "name": "bytes",
                    "type": "number",
                    "description": "the bytes value to convert",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "precision",
                    "type": "number",
                    "description": "number of decimal places",
                    "default": "0",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.bytesToSize(10000)\n'10 KB'\n> w.bytesToSize(10000, 1)\n'9.8 KB'\n> w.bytesToSize(10000, 2)\n'9.77 KB'\n> w.bytesToSize(10000, 3)\n'9.766 KB'"
            ],
            "returns": {
                "type": "string",
                "description": ""
            }
        },
        {
            "name": "getHomeDir",
            "access": "",
            "virtual": false,
            "description": "Cross-platform home directory retriever",
            "parameters": [],
            "examples": [
                "> w.getHomeDir()\n'/Users/Lloyd'"
            ]
        },
        {
            "name": "fill",
            "access": "",
            "virtual": false,
            "description": "Create a new string filled with the supplied character",
            "parameters": [
                {
                    "name": "fillWith",
                    "type": "string",
                    "description": "the fill character",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "len",
                    "type": "number",
                    "description": "the length of the output string",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.fill(\"a\", 10)\n'aaaaaaaaaa'\n> w.fill(\"ab\", 10)\n'aaaaaaaaaa'"
            ],
            "returns": {
                "type": "string",
                "description": ""
            }
        },
        {
            "name": "padRight",
            "access": "",
            "virtual": false,
            "description": "Add padding to the right of a string",
            "parameters": [
                {
                    "name": "input",
                    "type": "string",
                    "description": "the string to pad",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "width",
                    "type": "number",
                    "description": "the desired final width",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "padWith",
                    "type": "string",
                    "description": "the padding character",
                    "default": "\" \"",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.padRight(\"clive\", 1)\n'clive'\n> w.padRight(\"clive\", 1, \"-\")\n'clive'\n> w.padRight(\"clive\", 10, \"-\")\n'clive-----'"
            ],
            "returns": {
                "type": "string",
                "description": ""
            }
        },
        {
            "name": "exists",
            "access": "",
            "virtual": false,
            "description": "returns true if a value, or nested object value exists in an array",
            "parameters": [
                {
                    "name": "array",
                    "type": "Array",
                    "description": "the array to search",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "*",
                    "description": "the value to search for",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.exists([ 1, 2, 3 ], 2)\ntrue\n> w.exists([ { result: false }, { result: false } ], { result: true })\nfalse\n> w.exists([ { result: true }, { result: false } ], { result: true })\ntrue\n> w.exists([ { result: true }, { result: true } ], { result: true })\ntrue"
            ],
            "returns": {
                "type": "boolean",
                "description": ""
            }
        },
        {
            "name": "without",
            "access": "",
            "virtual": false,
            "description": "Returns the input array, minus the specied values",
            "parameters": [
                {
                    "name": "array",
                    "type": "Array",
                    "description": "the input array",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "toRemove",
                    "type": "*",
                    "description": "a single, or array of values to omit",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.without([ 1, 2, 3 ], 2)\n[ 1, 3 ]\n> w.without([ 1, 2, 3 ], [ 2, 3 ])\n[ 1 ]"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "first",
            "access": "",
            "virtual": false,
            "description": "Returns the first object in the input array with `property` set to `value`.",
            "parameters": [
                {
                    "name": "objectArray",
                    "type": "Object[]",
                    "description": "input array of objects",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "prop",
                    "type": "string",
                    "description": "property to inspect",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "val",
                    "type": "*",
                    "description": "desired value",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.first([{ product: \"egg\", stock: true }, { product: \"chicken\", stock: true }], \"stock\", true)\n{ product: 'egg', stock: true }\n> w.first([{ product: \"egg\", stock: true }, { product: \"chicken\", stock: true }], \"stock\", false)\nundefined"
            ],
            "returns": {
                "type": [
                    "Object",
                    "undefined"
                ],
                "description": ""
            }
        },
        {
            "name": "commonDir",
            "access": "",
            "virtual": false,
            "description": "commonDir returns the directory common to each path in the list",
            "parameters": [
                {
                    "name": "files",
                    "type": "Array",
                    "description": "An array of file paths to inspect",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> files = fs.readdirSync(\".\").map(function(file){ return path.resolve(file); })\n[ '/Users/Lloyd/Documents/75lb/wodge/.DS_Store',\n  '/Users/Lloyd/Documents/75lb/wodge/.git',\n  '/Users/Lloyd/Documents/75lb/wodge/.gitignore',\n  '/Users/Lloyd/Documents/75lb/wodge/.jshintrc',\n  '/Users/Lloyd/Documents/75lb/wodge/README.md',\n  '/Users/Lloyd/Documents/75lb/wodge/lib',\n  '/Users/Lloyd/Documents/75lb/wodge/node_modules',\n  '/Users/Lloyd/Documents/75lb/wodge/package.json',\n  '/Users/Lloyd/Documents/75lb/wodge/test' ]\n> w.commonDir(files)\n'/Users/Lloyd/Documents/75lb/wodge/'"
            ],
            "returns": {
                "type": "string",
                "description": "- A single path ending with the path separator, e.g. \"/user/some/folder/\""
            }
        },
        {
            "name": "union",
            "access": "",
            "virtual": false,
            "description": "merge two arrays into a single array of unique values",
            "parameters": [],
            "examples": [
                "> var array1 = [ 1, 2 ], array2 = [ 2, 3 ];\nundefined\n> w.union(array1, array2)\n[ 1, 2, 3 ]\n> var array1 = [ { id: 1 }, { id: 2 } ], array2 = [ { id: 2 }, { id: 3 } ];\nundefined\n> w.union(array1, array2)\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n> var array2 = [ { id: 2, blah: true }, { id: 3 } ]\nundefined\n> w.union(array1, array2)\n[ { id: 1 },\n  { id: 2 },\n  { id: 2, blah: true },\n  { id: 3 } ]\n> w.union(array1, array2, \"id\")\n[ { id: 1 }, { id: 2 }, { id: 3 } ]"
            ]
        },
        {
            "name": "commonSequence",
            "access": "",
            "virtual": false,
            "description": "Returns the initial elements which both input arrays have in common",
            "parameters": [
                {
                    "name": "a",
                    "type": "Array",
                    "description": "first array to compare",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "b",
                    "type": "Array",
                    "description": "second array to compare",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.commonSequence([1,2,3], [1,2,4])\n[ 1, 2 ]"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "escapeForJSON",
            "access": "",
            "virtual": false,
            "description": "strips special characters, making suitable for storage in a JS/JSON string",
            "parameters": [
                {
                    "name": "input",
                    "type": "string",
                    "description": "the input",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "> w.escapeForJSON(\"hello\\nthere\")\n'hello\\\\nthere'"
            ],
            "returns": {
                "type": "string",
                "description": ""
            }
        }
    ],
    "properties": [
        {
            "name": "symbol",
            "access": "",
            "virtual": false,
            "description": "some cross platform symbols (`tick` and `cross`)",
            "type": ""
        }
    ]
}

    }
}

