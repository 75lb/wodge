{
    "readme":{
        "template": "[![view on npm](http:\/\/img.shields.io\/npm\/v\/wodge.svg)](https:\/\/www.npmjs.org\/package\/wodge)\n![npm module downloads per month](http:\/\/img.shields.io\/npm\/dm\/wodge.svg)\n[![Dependency Status](https:\/\/david-dm.org\/75lb\/wodge.svg)](https:\/\/david-dm.org\/75lb\/wodge)\n![Analytics](https:\/\/ga-beacon.appspot.com\/UA-27725889-25\/wodge\/README.md?pixel)\n\n[![browser support](https:\/\/ci.testling.com\/75lb\/wodge.png)](https:\/\/ci.testling.com\/75lb\/wodge)\n\n#wodge\nA collection of useful functions.\n\n#API Documentation\nGenerated jsdoc documentation.\n\n{{#if functions}}{{#each functions}}##{{{name}}}\n{{#if description}}{{{description}}}\n\n{{\/if~}}\n\n{{#if parameters}}###Parameters\n{{#each parameters}}{{name}} { {{~type~}} } - {{{description}}}\n{{\/each}}\n{{\/if~}}\n\n{{#if examples}}###Example\n{{#each examples}}```js\n{{{this}}}\n```\n{{\/each}}{{\/if~}}\n\n{{#if returns}}**Returns** {{returns.type}} {{returns.description}}\n\n{{\/if~}}\n\n\n{{\/each}}{{\/if}}",
        "data": {
    "functions": [
        {
            "name": "extend",
            "access": "",
            "virtual": false,
            "description": "Merge a list of objects, left to right, into one.",
            "parameters": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "a sequence of Object instances to be extended",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "w.extend({}, { one: 1, three: 3 }, { one: \"one\", two: 2 }, { four: 4 });\n// { one: \"one\", two: 2, three: 3, four: 4 }"
            ]
        },
        {
            "name": "clone",
            "access": "",
            "virtual": false,
            "description": "Returns a copy of the input object",
            "parameters": [
                {
                    "name": "input",
                    "type": "Object",
                    "description": "the object to clone",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [],
            "returns": {
                "type": "Object",
                "description": ""
            }
        },
        {
            "name": "omit",
            "access": "",
            "virtual": false,
            "description": "Returns a clone of the input object, minus the specified properties",
            "parameters": [
                {
                    "name": "input",
                    "type": "Object",
                    "description": "the object to clone",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "toOmit",
                    "type": "string[]",
                    "description": "an array of property names to omit from the clone",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "w.omit({ one: 1, two: 2, three: 3, four: 4 }, [ \"two\", \"four\" ]);\n// { one: 1, three: 3 }"
            ],
            "returns": {
                "type": "Object",
                "description": ""
            }
        },
        {
            "name": "escapeRegExp",
            "access": "",
            "virtual": false,
            "description": "escape special regular expression characters",
            "parameters": [],
            "examples": [
                "w.escapeRegExp(\"(.*)\"); // => '\\\\(\\\\.\\\\*\\\\)'"
            ]
        },
        {
            "name": "pluck",
            "access": "",
            "virtual": false,
            "description": "return the first existing property",
            "parameters": [],
            "examples": []
        },
        {
            "name": "arrayify",
            "access": "",
            "virtual": false,
            "description": "Either:\n\n- puts a single scalar in an array\n- converts array-like object to a real array\n- converts null or undefined to an empty array",
            "parameters": [],
            "examples": []
        },
        {
            "name": "getHomeDir",
            "access": "",
            "virtual": false,
            "description": "Cross-platform home directory retriever",
            "parameters": [],
            "examples": []
        },
        {
            "name": "exists",
            "access": "",
            "virtual": false,
            "description": "",
            "parameters": [],
            "examples": [
                "exists([ 1, 2, 3 ], 2)             // true\nexists([\n    { result: false, number: 1 },\n    { result: false, number: 2 }\n], { result: true })               // false"
            ]
        },
        {
            "name": "first",
            "access": "",
            "virtual": false,
            "description": "Works on an array of objects. Returns the first object with `property` set to `value`.",
            "parameters": [],
            "examples": []
        },
        {
            "name": "commonDir",
            "access": "",
            "virtual": false,
            "description": "commonDir returns the directory common to each path in the list",
            "parameters": [
                {
                    "name": "files",
                    "type": "Array",
                    "description": "An array of file paths to inspect",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [],
            "returns": {
                "type": "string",
                "description": "- A single path ending with the path separator, e.g. \"/user/some/folder/\""
            }
        }
    ]
}

    }
}

